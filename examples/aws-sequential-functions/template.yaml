AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Add Three Numbers

  SAM Template for the example of adding three numbers together
  
Parameters:
  ApplicationName:
    Type: String
    Default: Omahdog-AwsSequentialFunctions
  ApiStageName:
    Type: String
    Default: test
        
Globals:
  Function:
    Timeout: 3
    CodeUri: dist/
    Runtime: nodejs12.x

Resources:

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      Name: !Sub ${ApplicationName}-ApiGateway
      EndpointConfiguration: REGIONAL
      Auth:
        ApiKeyRequired: true # sets for all methods

  ApiControllerFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${ApplicationName}-ApiControllerFunction
      Handler: apiControllerLambda.handler
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
          ADD_THREE_NUMBERS_FUNCTION_NAME: !Ref AddThreeNumbersHandlerFunction
          ADD_TWO_NUMBERS_FUNCTION_NAME: !Ref AddTwoNumbersHandlerFunction
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
        # TODO: Think about: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#lambda-invoke-policy
        - LambdaInvokePolicy:
            FunctionName: !Ref AddThreeNumbersHandlerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AddTwoNumbersHandlerFunction
      Events:
        GetFunctionEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Method: GET
            Path: /do/{functionName}
        PostFunctionEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Method: POST
            Path: /do/{functionName}

  FlowExchangeTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ApplicationName}-FlowExchangeTopic
      DisplayName: Topic for request & response messages

  FlowDeadLetterQueueTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ApplicationName}-FlowDeadLetterQueueTopic
      DisplayName: Topic for flow dead letter messages

  FlowInstanceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ApplicationName}-FlowInstanceTable

  FlowResultTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ApplicationName}-FlowResultTable
  
  WireTapFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-WireTapFunction
      Handler: wireTapLambda.handler
      Events:
        ExchangeTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowExchangeTopic
        DeadLetterQueueTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowDeadLetterQueueTopic
  
  DeadLetterQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-DeadLetterQueueFunction
      Handler: requestLambdas.deadLetterQueueHandler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
      Events:
        DeadLetterQueueTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowDeadLetterQueueTopic
  
  AddThreeNumbersHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-AddThreeNumbersHandler
      Handler: requestLambdas.addThreeNumbersHandler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref FlowInstanceTable
        - LambdaInvokePolicy:
            FunctionName: !Ref SumNumbersHandlerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StoreTotalFunction
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref FlowDeadLetterQueueTopic
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
          FLOW_INSTANCE_TABLE_NAME: !Ref FlowInstanceTable
          SUM_NUMBERS_FUNCTION_NAME: !Ref SumNumbersHandlerFunction
          STORE_TOTAL_FUNCTION_NAME: !Ref StoreTotalFunction
      Events:
        ExchangeTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowExchangeTopic
            FilterPolicy:
              MessageType:
                - AddThreeNumbersRequest:Handler
                - AddThreeNumbersHandler:Response
  
  AddTwoNumbersHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-AddTwoNumbersHandler
      Handler: requestLambdas.addTwoNumbersHandler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref FlowInstanceTable
        - LambdaInvokePolicy:
            FunctionName: !Ref SumNumbersHandlerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StoreTotalFunction
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref FlowDeadLetterQueueTopic
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
          FLOW_INSTANCE_TABLE_NAME: !Ref FlowInstanceTable
          SUM_NUMBERS_FUNCTION_NAME: !Ref SumNumbersHandlerFunction
          STORE_TOTAL_FUNCTION_NAME: !Ref StoreTotalFunction
      Events:
        ExchangeTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowExchangeTopic
            FilterPolicy:
              MessageType:
                - AddTwoNumbersRequest:Handler
                - AddTwoNumbersHandler:Response
  
  SumNumbersHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-SumNumbersHandler
      Handler: requestLambdas.sumNumbersHandler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref FlowInstanceTable
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref FlowDeadLetterQueueTopic
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
          FLOW_INSTANCE_TABLE_NAME: !Ref FlowInstanceTable
      Events:
        ExchangeTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowExchangeTopic
            FilterPolicy:
              MessageType:
                - SumNumbersRequest:Handler
                - SumNumbersHandler:Response
  
  StoreTotalFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-StoreTotalHandler
      Handler: requestLambdas.storeTotalHandler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt FlowExchangeTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref FlowInstanceTable
        # TODO: How to auto-generate this? The handler would have to expose that it needed such a table
        - DynamoDBCrudPolicy:
            TableName: !Ref FlowResultTable
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref FlowDeadLetterQueueTopic
      Environment:
        Variables:
          FLOW_EXCHANGE_TOPIC_ARN: !Ref FlowExchangeTopic
          FLOW_INSTANCE_TABLE_NAME: !Ref FlowInstanceTable
          # TODO: How to auto-generate this? The handler would have to expose that it needed such a variable
          FLOW_RESULT_TABLE_NAME: !Ref FlowResultTable
      Events:
        ExchangeTopic:
          Type: SNS
          Properties:
            Topic: !Ref FlowExchangeTopic
            FilterPolicy:
              MessageType:
                - StoreTotalRequest:Handler
                - StoreTotalHandler:Response

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/"
  # WireTapFunction:
  #   Description: "Function to log all messages published to a topic"
  #   Value: !GetAtt WireTapFunction.Arn
  # WireTapFunctionIamRole:
  #   Description: "Implicit IAM Role created for WireTapFunction"
  #   Value: !GetAtt WireTapFunction.Arn
  # TODO: Do we need to output anything else?
